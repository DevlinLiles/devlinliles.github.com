<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Devlineator]]></title>
  <link href="http://devlinliles.com/atom.xml" rel="self"/>
  <link href="http://devlinliles.com/"/>
  <updated>2012-02-21T20:16:44-06:00</updated>
  <id>http://devlinliles.com/</id>
  <author>
    <name><![CDATA[Devlin Liles]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to constrain mocks for use with Complex Types]]></title>
    <link href="http://devlinliles.com/blog/How-to-constrain-mocks-for-use-with-Complex-Types/"/>
    <updated>2012-01-19T00:00:00-06:00</updated>
    <id>http://devlinliles.com/blog/How-to-constrain-mocks-for-use-with-Complex-Types</id>
    <content type="html"><![CDATA[<p>Here are some tests to illustrate how to leverage RhinoMocks constraints. Notice that it is easier to get a passing test on failing code with a stub. The Strict mock will enforce the expectations at the time of the call, where the stub will only throw an exception on an AssertWasCalled. Due to this I would recommend that you explicitly do your setup and use strict mocks, or make sure to have the discipline to test those assertions. </p>  <p>&#160;</p>  <p>With the method Matches() ,you can use any predicate or method call that returns a boolean. You cannot however use a lambda with a method body aka () =&gt;{}. This will not compile.</p>  <p>[TestClass]</p>  <p>public class Tests</p>  <p>{</p>  <p>[TestMethod]   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public void Should_Allow_Constraint()    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Arrange    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var mock = MockRepository.GenerateStrictMock&lt;ITestExerciser&gt;();    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; mock.Expect(x =&gt; x.DoSomething(Arg&lt;List&lt;ITest&gt;&gt;.Matches(c =&gt; c.First() is Test))).Return(&quot;TestPass&quot;);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var tester = new Tester(mock);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Act    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var result = tester.DoIt();</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Assert   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; mock.VerifyAllExpectations();    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Assert.AreEqual(&quot;TestPass&quot;,result);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; [TestMethod]   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public void Should_Enforce_Constraint_On_Strict_Mock()    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Arrange    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var mock = MockRepository.GenerateStrictMock&lt;ITestExerciser&gt;();    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; mock.Expect(x =&gt; x.DoSomething(Arg&lt;List&lt;ITest&gt;&gt;.Matches(c =&gt; c.Any(t=&gt; t is Test)))).Return(&quot;TestPass&quot;);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var tester = new Tester(mock);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Act    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var result = tester.DoItWrong();</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Assert   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; mock.VerifyAllExpectations();    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Assert.AreEqual(&quot;TestPass&quot;, result);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; [TestMethod]   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public void Should_Allow_Manual_Enforce_Constraint_On_Stub()    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Arrange    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var mock = MockRepository.GenerateStub&lt;ITestExerciser&gt;();    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; mock.Expect(x =&gt; x.DoSomething(Arg&lt;List&lt;ITest&gt;&gt;.Matches(c =&gt; TestSomething(c)))).Return(&quot;TestPass&quot;);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var tester = new Tester(mock);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Act    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var result = tester.DoItWrong();</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //Assert   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; mock.AssertWasCalled(x =&gt; x.DoSomething(Arg&lt;List&lt;ITest&gt;&gt;.Matches(c =&gt; c.Any(t =&gt; t is Test))));    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Assert.AreEqual(&quot;TestPass&quot;, result);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; private bool TestSomething(List&lt;ITest&gt; tests)   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return true;    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160; public class Tester   <br />&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; private ITestExerciser _testExerciser;</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; public Tester(ITestExerciser testExerciser)   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; _testExerciser = testExerciser;    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; public object DoIt()   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return _testExerciser.DoSomething(new List&lt;ITest&gt;() {new Test()});    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; public object DoItWrong()   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return _testExerciser.DoSomething(new List&lt;ITest&gt;() { new TestBase() });    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160; public class TestExerciser : ITestExerciser   <br />&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public object DoSomething(List&lt;ITest&gt; args)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return null;    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160; public interface ITestExerciser   <br />&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; object DoSomething(List&lt;ITest&gt; args);    <br />&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160; public class Test : TestBase   <br />&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; <br />&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160; public class TestBase : ITest   <br />&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public int Id { get; set; }    <br />&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160; public interface ITest   <br />&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; int Id { get; set; }    <br />&#160;&#160;&#160; }</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AgileDotNet is Coming!!! Are you registered?]]></title>
    <link href="http://devlinliles.com/blog/AgileDotNet-is-Coming-Are-you-registered/"/>
    <updated>2012-01-19T00:00:00-06:00</updated>
    <id>http://devlinliles.com/blog/AgileDotNet-is-Coming-Are-you-registered</id>
    <content type="html"><![CDATA[<p>AgileDotNet is a .NET centered agile conference that covers a wide band of topics ranging from leadership and adoption techniques to tools and development practices. It is a must see for every person interested in Agile, from the new comer trying to figure out what it is, to the experienced pro looking for some best practices.</p>  <p>I am speaking on Database Development for Agile teams, and there are a swath of great speakers on many other great topics!</p>  <p>Full details can be found here &#8211; <a href="http://www.agiledotnet.com/">http://www.agiledotnet.com/</a></p>  <p>Hope to See you there!</p>  <p>&#160;</p>  <p>AgileDotNet is brought to you by:</p>  <p><a href="http://improvingenterprises.com/"><img alt="Improving Enterprises" src="http://d2h1skdz8xhwzm.cloudfront.net/wp-content/themes/AgileDotNet/images/sponsor-improving.png" /> </a><a href="http://microsoft.com/"><img alt="Microsoft" src="http://d2h1skdz8xhwzm.cloudfront.net/wp-content/themes/AgileDotNet/images/sponsor-microsoft.png" /></a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrency and Locking in Entity Framework]]></title>
    <link href="http://devlinliles.com/blog/Concurrency-and-Locking-in-Entity-Framework/"/>
    <updated>2011-12-29T00:00:00-06:00</updated>
    <id>http://devlinliles.com/blog/Concurrency-and-Locking-in-Entity-Framework</id>
    <content type="html"><![CDATA[<p>So I was talking to a friend this afternoon and the question of how Entity Framework handles locking came up. It is important to know that no pessimistic locking exists in Entity framework. Save Changes uses implementation of DbTransaction <font face="Verdana">for current store provider. It means that default transaction isolation level is set to default value for the database server. In SQL Server it is Read Committed. </font></p>  <p>Make sure you look at how the tables are defined when it comes to lock levels and how the server you are using is configured.</p>  <p>&#160;</p>  <p>Here are the details that I pointed him to.</p>  <p><a title="http://msdn.microsoft.com/en-us/library/ms184286.aspx" href="http://msdn.microsoft.com/en-us/library/ms184286.aspx">http://msdn.microsoft.com/en-us/library/ms184286.aspx</a></p>  <p><a title="http://msdn.microsoft.com/en-us/library/bb738618.aspx" href="http://msdn.microsoft.com/en-us/library/bb738618.aspx">http://msdn.microsoft.com/en-us/library/bb738618.aspx</a></p>  <p>&#160;</p>  <p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tulsa Tech Fest 2011]]></title>
    <link href="http://devlinliles.com/blog/Tulsa-Tech-Fest-2011/"/>
    <updated>2011-10-10T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Tulsa-Tech-Fest-2011</id>
    <content type="html"><![CDATA[<p>Thank you to everyone who attended my talks, it was great. We had a great time. The talk on data access architecture had great feedback and interaction. If you came here looking for code the link is below. Enjoy.</p>  <p><a href="http://db.tt/O5ajHj7N">http://db.tt/O5ajHj7N</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Houston DNUG Presentation]]></title>
    <link href="http://devlinliles.com/blog/Houston-DNUG-Presentation/"/>
    <updated>2011-09-08T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Houston-DNUG-Presentation</id>
    <content type="html"><![CDATA[<p>Great crowd at the Houston DNUG tonight!! Over 110 in attendance.</p>  <p>Great Questions from the group during the talk. I especially like the follow ups. Thank you all for attending. Below is a link to the code you saw tonight.</p>  <p><a href="http://db.tt/oJFvvrf">http://db.tt/oJFvvrf</a></p>  <p>Here are those EF links</p>  <p><a href="http://archive.msdn.microsoft.com/EFExtensions">http://archive.msdn.microsoft.com/EFExtensions</a></p>  <p><a href="http://www.codeproject.com/KB/database/CodeFirstStoredProcedures.aspx">http://www.codeproject.com/KB/database/CodeFirstStoredProcedures.aspx</a></p>  <p>For everyone interested in how to specify unique constraints that are not keys, please check this out.</p>  <p><a title="http://stackoverflow.com/questions/4413084/unique-constraint-in-entity-framework-code-first" href="http://stackoverflow.com/questions/4413084/unique-constraint-in-entity-framework-code-first">http://stackoverflow.com/questions/4413084/unique-constraint-in-entity-framework-code-first</a></p>  <p>This is very similar to how we talked about adding cascade delete to foreign keys.</p>  <p>Thanks again, look forward to seeing you all at Houston TechFest!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dallas TechFest 2011–Awesome Conference!]]></title>
    <link href="http://devlinliles.com/blog/Dallas-TechFest-2011e28093Awesome-Conference/"/>
    <updated>2011-08-14T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Dallas-TechFest-2011e28093Awesome-Conference</id>
    <content type="html"><![CDATA[<p>This was a great conference. Tim Rayburn puts on one great show and the free sushi after party!! </p>  <p>&#160;</p>  <p>&#160;</p>  <p>For those that are hunting my presentation zips for code here they are.</p>  <p>Thank you all for attending, two packed rooms and some great questions.</p>  <p>Now for the Guy that I don’t know with the great question about single user mode, you were right! Here is the stack overflow link for that answer.</p>  <p><a title="http://stackoverflow.com/questions/5288996/database-in-use-error-with-entity-framework-4-code-first" href="http://stackoverflow.com/questions/5288996/database-in-use-error-with-entity-framework-4-code-first">http://stackoverflow.com/questions/5288996/database-in-use-error-with-entity-framework-4-code-first</a></p>  <p>&#160;</p>  <p>Architecture and EF not the odd couple</p>  <p><a href="http://db.tt/m4teLVI">http://db.tt/m4teLVI</a></p>  <p>EF Code First Goodness</p>  <p><a href="http://db.tt/Du99mJm">http://db.tt/Du99mJm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Engineer Code First–Jump start for existing Databases]]></title>
    <link href="http://devlinliles.com/blog/Reverse-Engineer-Code-Firste28093Jump-start-for-existing-Databases/"/>
    <updated>2011-05-30T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Reverse-Engineer-Code-Firste28093Jump-start-for-existing-Databases</id>
    <content type="html"><![CDATA[<p>I know that we have all hit that point where we are going into a project, it has existing database structure and some old ADO.NET hand built data access layer. We think maybe this would be a great place for Entity Framework, and then we find that the business objects are serialized over WCF, or that they are somehow used in a way that makes standard EF cry. This is where we have that internal debate on if our boss will accept a week of writing code just to get code first running, not to solving the problem. In comes the <a href="http://visualstudiogallery.msdn.microsoft.com/72a60b14-1581-4b9b-89f2-846072eff19d">EF Power Toys</a>.</p>  <p>&#160;</p>  <p>Just start up a new project in Visual Studio.</p>  <p><a href="http://devlinliles.com/images/image_42.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://devlinliles.com/images/image_thumb_42.png" width="244" height="100" /></a></p>  <p>With nuget type Install-Package EntityFramework ( this avoids a bug later )</p>  <p>Right click the project and select Entity Framework Reverse Engineer Code first</p>  <p><a href="http://devlinliles.com/images/image_43.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://devlinliles.com/images/image_thumb_43.png" width="600" height="163" /></a>&#160;</p>  <p>Punch in your connection information</p>  <p><a href="http://devlinliles.com/images/image_44.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://devlinliles.com/images/image_thumb_44.png" width="306" height="440" /></a></p>  <p>Then watch the bottom left side status messages, it will load schema information, create objects and configuration for them.</p>      <p>You should now have a context, an entities folder, and a mappings folder.</p>  <p><a href="http://devlinliles.com/images/image_45.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://devlinliles.com/images/image_thumb_45.png" width="244" height="208" /></a></p>  <p>This includes every entity in the database and a mapping for every property. It doesn’t leave off properties that could have taken advantage of convention.</p>  <p>You can use this the same way you used a code first context before.</p>  <p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Fluent Configuration with Entity Framework 4.1]]></title>
    <link href="http://devlinliles.com/blog/Using-Fluent-Configuration-with-Entity-Framework-41/"/>
    <updated>2011-05-24T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Using-Fluent-Configuration-with-Entity-Framework-41</id>
    <content type="html"><![CDATA[<p>I have gotten the question several time over the last few weeks and usages for the fluent configuration of Code First POCO classes where the database does not match the convention. Here is a simple example on how to address this.</p>  <p>Take a product for example.</p>  <p>public class Product    <br />&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160; public int ID { get; set; }    <br />&#160;&#160;&#160;&#160;&#160;&#160; public string Name { get; set; }    <br />&#160;&#160;&#160;&#160;&#160;&#160; public string ProductNumber { get; set; }    <br />&#160;&#160;&#160;&#160;&#160;&#160; public bool MakeFlag { get; set; }    <br />&#160;&#160; }    <br /></p>  <p>To configure this to use different column names for the properties you simply need to add a configuration for that class like so.</p>  <p>public class ProductConfiguration :<font style="background-color: #ffff00"> EntityTypeConfiguration&lt;Product&gt;     <br /></font>&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160; public ProductConfiguration()    <br />&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.ToTable(&quot;Product&quot;,&quot;Production&quot;);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.HasKey(x =&gt; x.ID);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.Property(x =&gt; x.ID).HasColumnName(&quot;ProductID&quot;);    <br />&#160;&#160;&#160;&#160;&#160;&#160; }    <br />&#160;&#160; }    <br /></p>  <p>Notice how the inheritance tells it which class it is setting up a type configuration for.</p>  <p>Then you load the configuration to the context in an override like so.</p>  <p>public class AdventureWorkContext : DbContext   <br />&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public AdventureWorkContext(string adventureWorks)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; : base(adventureWorks)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.Database.CompatibleWithModel(false);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; protected override void OnModelCreating(DbModelBuilder modelBuilder)   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font style="background-color: #ffff00">&#160; modelBuilder.Configurations.Add(new ProductConfiguration());     <br /></font>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; base.OnModelCreating(modelBuilder);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; public DbSet&lt;Product&gt; Products { get; set; }</p>  <p>}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dallas Tech Fest 2011–Call for Speakers Open]]></title>
    <link href="http://devlinliles.com/blog/Dallas-Tech-Fest-2011e28093Call-for-Speakers-Open/"/>
    <updated>2011-05-17T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Dallas-Tech-Fest-2011e28093Call-for-Speakers-Open</id>
    <content type="html"><![CDATA[<p>Dallas TechFest 2011 has opened the <strong><a href="http://bit.ly/BBjWA">Call For Speakers</a></strong> at our new website.&#160; In order to submit sessions you must register on the website, complete your speaker profile, and then you will be able to add sessions.&#160; We expect the end the call for speakers in early June, so please submit soon!</p>  <p>Dallas TechFest 2011 is a multi-day, multi-disciplinary technology conference focused on software development and IT professionals.&#160; It will be held on August 12th and 13th 2011 at the University of Texas at Dallas.&#160; We are interested in anything related to these subjects as talks, regardless of technology.&#160; We have had talks covering everything from iPhone to Java, .NET to Android.</p>  <p><strong>Twitter Tag : #dtf11      <br />Twitter Account : @DallasTechFest</strong></p>  <p><strong></strong></p>  <p><strong>Check it out at <a href="http://dallastechfest.com">http://dallastechfest.com</a> and <a title="http://timrayburn.net/" href="http://timrayburn.net/">http://timrayburn.net/</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Sort With LINQ]]></title>
    <link href="http://devlinliles.com/blog/Dynamic-Sort-With-LINQ/"/>
    <updated>2011-05-13T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Dynamic-Sort-With-LINQ</id>
    <content type="html"><![CDATA[<p>We have all at one time or another gotten a user request for sorts based on columns. If that is a pre-built control it most likely has this, and if it is home grown then it will probably need some work. You could write a sort for every column or you could write on that takes the column name in and sorts based on a string. LINQ however doesn’t like this. If you want string based sorting then you must do either a really nasty case statement or use a sort extension like this one.</p>  <p>&#160;</p>  <p>public static class LinqSortExtensions    <br />{     <br />&#160;&#160;&#160; private const string Ascending = &quot;ASC&quot;;</p>  <p>&#160;&#160;&#160; public static IOrderedQueryable&lt;T&gt; OrderBy&lt;T&gt;(this IQueryable&lt;T&gt; source, string property, string dirrection)    <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; return dirrection == Ascending ? source.OrderBy(property) : source.OrderByDescending(property);     <br />&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160; public static IOrderedQueryable&lt;T&gt; OrderBy&lt;T&gt;(this IQueryable&lt;T&gt; source, string property)    <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; return ApplyOrder(source, property, &quot;OrderBy&quot;);     <br />&#160;&#160;&#160; }     <br />&#160;&#160;&#160; public static IOrderedQueryable&lt;T&gt; OrderByDescending&lt;T&gt;(this IQueryable&lt;T&gt; source, string property)     <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; return ApplyOrder(source, property, &quot;OrderByDescending&quot;);     <br />&#160;&#160;&#160; }     <br />&#160;&#160;&#160; public static IOrderedQueryable&lt;T&gt; ThenBy&lt;T&gt;(this IOrderedQueryable&lt;T&gt; source, string property, string dirrection)     <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; return dirrection == Ascending ? source.ThenBy(property) : source.ThenByDescending(property);     <br />&#160;&#160;&#160; }     <br />&#160;&#160;&#160; public static IOrderedQueryable&lt;T&gt; ThenBy&lt;T&gt;(this IOrderedQueryable&lt;T&gt; source, string property)     <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; return ApplyOrder(source, property, &quot;ThenBy&quot;);     <br />&#160;&#160;&#160; }     <br />&#160;&#160;&#160; public static IOrderedQueryable&lt;T&gt; ThenByDescending&lt;T&gt;(this IOrderedQueryable&lt;T&gt; source, string property)     <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; return ApplyOrder(source, property, &quot;ThenByDescending&quot;);     <br />&#160;&#160;&#160; }     <br />&#160;&#160;&#160; static IOrderedQueryable&lt;T&gt; ApplyOrder&lt;T&gt;(IQueryable&lt;T&gt; source, string property, string methodName)     <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; var props = property.Split(&#8216;.&#8217;);     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; var type = typeof(T);     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; var arg = Expression.Parameter(type, &quot;x&quot;);     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; Expression expr = arg;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; foreach (var pi in props.Select(prop =&gt; type.GetProperty(prop)))     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; expr = Expression.Property(expr, pi);     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; type = pi.PropertyType;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; var delegateType = typeof(Func&lt;,&gt;).MakeGenericType(typeof(T), type);     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; var lambda = Expression.Lambda(delegateType, expr, arg);</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; var result = typeof(Queryable).GetMethods().Single(    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; method =&gt; method.Name == methodName     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &amp;&amp; method.IsGenericMethodDefinition     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &amp;&amp; method.GetGenericArguments().Length == 2     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &amp;&amp; method.GetParameters().Length == 2)     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; .MakeGenericMethod(typeof(T), type)     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; .Invoke(null, new object[] { source, lambda });     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; return (IOrderedQueryable&lt;T&gt;)result;     <br />&#160;&#160;&#160; }</p>  <p>&#160;</p>  <p>This allows you to pass in a property name and a direction. It allows for multiple sorts, and in case some out there want them, here are the unit tests too..</p>  <p>&#160;</p>  <p>[TestFixture]    <br />&#160;&#160;&#160; public class QueryTests     <br />&#160;&#160;&#160; {</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; [Test]    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public void CanSortWithOnlyStrings()     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; IQueryable&lt;TestObject&gt; items = new List&lt;TestObject&gt;()     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 1, Test = &quot;Test1&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 3, Test = &quot;Test3&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 2, Test = &quot;Test2&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }.AsQueryable();</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Assert.AreEqual(2, items.OrderBy(&quot;id&quot;, &quot;ASC&quot;).ToArray()[1].id);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; [Test]    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public void CanSortDescendingWithOnlyString()     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; IQueryable&lt;TestObject&gt; items = new List&lt;TestObject&gt;()     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 1, Test = &quot;Test1&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 3, Test = &quot;Test3&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 2, Test = &quot;Test2&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }.AsQueryable();</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Assert.AreEqual(1, items.OrderBy(&quot;id&quot;, &quot;DSC&quot;).ToArray()[2].id);</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; [Test]    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public void CanSortMultipleTimesAscending()     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; IQueryable&lt;TestObject&gt; items = new List&lt;TestObject&gt;()     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 1, Test = &quot;Test1&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 3, Test = &quot;Test3&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 2, Test = &quot;Test3&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 2, Test = &quot;Test2&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 2, Test = &quot;Test1&quot;}     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }.AsQueryable();     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var item = items.OrderBy(&quot;id&quot;, &quot;ASC&quot;).ThenBy(&quot;Test&quot;, &quot;ASC&quot;).ToArray()[3];     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Assert.AreEqual(&quot;Test3&quot;, item.Test);     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; [Test]    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public void CanSortMultipleTimesWithMultipleDirrections()     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; IQueryable&lt;TestObject&gt; items = new List&lt;TestObject&gt;()     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 1, Test = &quot;Test1&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 3, Test = &quot;Test3&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 2, Test = &quot;Test3&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 2, Test = &quot;Test2&quot;},     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new TestObject(){id = 2, Test = &quot;Test1&quot;}     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }.AsQueryable();     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var item = items.OrderBy(&quot;id&quot;, &quot;ASC&quot;).ThenBy(&quot;Test&quot;, &quot;DSC&quot;).ToArray()[3];     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Assert.AreEqual(&quot;Test1&quot;, item.Test);</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160; public class TestObject    <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public int id { get; set; }     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public string Test { get; set; }     <br />&#160;&#160;&#160; }</p>  <p>Enjoy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dallas DNUG Presentation–File New with EF and POCO separation]]></title>
    <link href="http://devlinliles.com/blog/Dallas-DNUG-Presentatione28093File-New-with-EF-and-POCO-separation/"/>
    <updated>2011-05-12T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Dallas-DNUG-Presentatione28093File-New-with-EF-and-POCO-separation</id>
    <content type="html"><![CDATA[<p>I spoke at the Dallas .NET User Group to a great crowd tonight and wanted to get the code and files up here for everyone. It was a great night with lots of really good questions.</p>  <p>Files are at</p>  <p><a title="http://dl.dropbox.com/u/15486441/EFFN.zip" href="http://dl.dropbox.com/u/15486441/EFFN.zip">http://dl.dropbox.com/u/15486441/EFFN.zip</a></p>  <p>If you have any questions feel free to email me, or hit a direct message on twitter.</p>  <p>&#160;</p>  <p>Thanks for coming out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework–Metadata Connection Strings for EDMX files in another assembly]]></title>
    <link href="http://devlinliles.com/blog/Entity-Frameworke28093Metadata-Connection-Strings-for-EDMX-files-in-another-assembly/"/>
    <updated>2011-05-06T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Entity-Frameworke28093Metadata-Connection-Strings-for-EDMX-files-in-another-assembly</id>
    <content type="html"><![CDATA[<p>I am sure that we have all looked at the generated EDMX files with some architectural concerns. This is probably due to the business objects and the context being tightly coupled. I have other blogs for separating this out but once you do you end up with the need to have this metadata embedded connection string for the Entites to function. This string can be placed in the app or web config and you are off the the races but what happens when your EDMX is in another assembly that lives under a different namespace and you get the dreaded “Cannot locate metadata resource specified” error? You solve it be giving a connection string that points to the location of the file. Like so.</p>  <p>&#160;</p>  <p>public static class EntityFrameworkConnectionStringHelper    <br />&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static string GetSqlConnectionString(string serverName, string databaseName)     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var providerCs = new SqlConnectionStringBuilder     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; DataSource = serverName,     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; InitialCatalog = databaseName,     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; IntegratedSecurity = true     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; };</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return GetSqlConnectionString(providerCs.ToString());    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static string GetSqlConnectionString(string providerConnectionString)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var namespaceString = typeof ($YourEdmxNameHere$Entities).Namespace;</p>  <p>   <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var fullName = typeof ($YourEdmxNameHere$Entities).Assembly.FullName;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //This allows you to trim just the assembly name off the namespace while </p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //leaving the&#160; rest of the namespace</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; string trimmedNamespace = namespaceString.Remove(0, fullName.IndexOf(&quot;,&quot;) + 1);    <br />    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var csBuilder = new EntityConnectionStringBuilder();     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; csBuilder.Provider = &quot;System.Data.SqlClient&quot;;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; csBuilder.ProviderConnectionString = providerConnectionString;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; csBuilder.Metadata = string.Format(     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &quot;res://{0}/{1}.$YourEdmxNameHere$.csdl|res://{0}/{1}.$YourEdmxNameHere$.ssdl|res://{0}/{1}.$YourEdmxNameHere$.msl&quot;,     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; fullName, trimmedNamespace);</p>  <p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return csBuilder.ToString();    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }     <br />&#160;&#160;&#160; }</p>  <p>&#160;</p>  <p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composing Complex Queries with LINQ to Entities]]></title>
    <link href="http://devlinliles.com/blog/Composing-Complex-Queries-with-LINQ-to-Entities/"/>
    <updated>2011-04-29T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Composing-Complex-Queries-with-LINQ-to-Entities</id>
    <content type="html"><![CDATA[<p>We have all had those times where we have had to build chains on complex where statements, with several OR / AND operations. These make LINQ queries look really complex and most of the time need to be reused in several places. To clean this up and give us the ability to compose complex queries on the fly from say a UI filter or something similar give the following a try.</p>  <p>public class Test   <br />&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public void Testing()    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Expression&lt;Func&lt;Product, bool&gt;&gt; isRed = c1 =&gt; c1.Color == &quot;Red&quot;;    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Expression&lt;Func&lt;Product, bool&gt;&gt; isCheap = c2 =&gt; c2.StandardCost &lt; 10.0m;    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Expression&lt;Func&lt;Product, bool&gt;&gt; isClothing = c3 =&gt; c3.Class == &quot;Clothing&quot;;    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Expression&lt;Func&lt;Product, bool&gt;&gt; isAcceptable = Utility.BuildOrElse(isRed, isCheap, isClothing);    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; IQueryable&lt;Product&gt; products = null;    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var query = products.Where(isAcceptable);    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160; public class ParameterRebinder : ExpressionVisitor    <br />&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; private readonly Dictionary&lt;ParameterExpression, ParameterExpression&gt; map;    <br />     <br />     <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public ParameterRebinder(Dictionary&lt;ParameterExpression, ParameterExpression&gt; map)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.map = map ?? new Dictionary&lt;ParameterExpression, ParameterExpression&gt;();    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />     <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static Expression ReplaceParameters(Dictionary&lt;ParameterExpression, ParameterExpression&gt; map, Expression exp)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return new ParameterRebinder(map).Visit(exp);    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />     <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; protected override Expression VisitParameter(ParameterExpression p)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ParameterExpression replacement;    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; if (map.TryGetValue(p, out replacement))    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; p = replacement;    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return base.VisitParameter(p);    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160; public static class Utility    <br />&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static Expression&lt;T&gt; Compose&lt;T&gt;(this Expression&lt;T&gt; first, Expression&lt;T&gt; second, Func&lt;Expression, Expression, Expression&gt; merge)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // build parameter map (from parameters of second to parameters of first)    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var map = first.Parameters.Select((f, i) =&gt; new { f, s = second.Parameters[i] }).ToDictionary(p =&gt; p.s, p =&gt; p.f);    <br />     <br />     <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // replace parameters in the second lambda expression with parameters from the first    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; var secondBody = ParameterRebinder.ReplaceParameters(map, second.Body);    <br />     <br />     <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // apply composition of lambda expression bodies to parameters from the first expression&#160; <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return Expression.Lambda&lt;T&gt;(merge(first.Body, secondBody), first.Parameters);    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />     <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static Expression&lt;Func&lt;T, bool&gt;&gt; And&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt; first, Expression&lt;Func&lt;T, bool&gt;&gt; second)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return first.Compose(second, Expression.And);    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />     <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static Expression&lt;Func&lt;T, bool&gt;&gt; Or&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt; first, Expression&lt;Func&lt;T, bool&gt;&gt; second)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return first.Compose(second, Expression.Or);    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static Expression&lt;Func&lt;T, bool&gt;&gt; OrElse&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt; first, Expression&lt;Func&lt;T, bool&gt;&gt; second)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return first.Compose(second, Expression.Or);    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static Expression&lt;Func&lt;T, bool&gt;&gt; BuildAnd&lt;T&gt;(params Expression&lt;Func&lt;T, bool&gt;&gt;[] conditions)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return conditions.Aggregate&lt;Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;&gt;(null, (current, expression) =&gt; current == null ? expression : current.And(expression));    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static Expression&lt;Func&lt;T, bool&gt;&gt; BuildOr&lt;T&gt;(params Expression&lt;Func&lt;T, bool&gt;&gt;[] conditions)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return conditions.Aggregate&lt;Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;&gt;(null, (current, expression) =&gt; current == null ? expression : current.Or(expression));    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static Expression&lt;Func&lt;T, bool&gt;&gt; BuildOrElse&lt;T&gt;(params Expression&lt;Func&lt;T, bool&gt;&gt;[] conditions)    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return conditions.Aggregate&lt;Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;&gt;(null, (current, expression) =&gt; current == null ? expression : current.OrElse(expression));    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />     <br />&#160;&#160;&#160; }    <br /></p>  <p>Adapted and added to from</p> <a title="http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx" href="http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx">http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to manage Queries with Entity Framework]]></title>
    <link href="http://devlinliles.com/blog/How-to-manage-Queries-with-Entity-Framework/"/>
    <updated>2011-04-25T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/How-to-manage-Queries-with-Entity-Framework</id>
    <content type="html"><![CDATA[<p>We have all looked at where statements all through out code and seen the same .Where() typed 20-30 times through out the code. It seems that when using LINQ we have such an easy time typing expressions and method chains with the fluent API that we have forgotten to obey DRY. ( Don&rsquo;t Repeat Yourself ) Any line of code that has been written twice is a waste. If&nbsp; writing the same code twice you are stealing, plain and simple! You are stealing away consistency and supportability, and are causing multiple points of change for future changes. Take the following code for example, and keep in mind this is a simple and the problem will be worse in larger code bases.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main(string[] args)   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository = new EntityFrameworkRepository(new AdventureWorksEntities());    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _productRepository = new ProductRepository(_repository);    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository.AsQueryable&lt;Product&gt;().Where(x =&gt; x.Class == &#8220;Something&#8221;);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var longRunningProducts = _productRepository.GetLongRunningProducts();    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public List&lt;Product&gt; GetProducts()    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _repository.AsQueryable&lt;Product&gt;().Where(p =&gt; p.Class == &#8220;Clothing&#8221;).ToList();    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public List&lt;Product&gt; GetInventory()    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var items = _repository.AsQueryable&lt;Product&gt;().Where(p =&gt; p.Class == &#8220;Clothing&#8221;).ToList();    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Do Stuff    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return items;    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>Now that we are able to look at the problem with open eyes the next question is how do we control this so that there is one place for this logic. The answer is query libraries.</p>
<p>static void Main(string[] args)   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository = new EntityFrameworkRepository(new AdventureWorksEntities());    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _productRepository = new ProductRepository(_repository);    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository.AsQueryable&lt;Product&gt;().Where(x =&gt; x.Class == &#8220;Something&#8221;);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var longRunningProducts = _productRepository.GetLongRunningProducts();    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IEnumerable&lt;Product&gt; GetProducts()    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _repository.GetClothing();    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IEnumerable&lt;Product&gt; GetInventory()    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var items = _repository.GetClothing();    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Do Stuff    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return items;    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;</p>
<p>public static class ProductQueries   <br />&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static IQueryable&lt;Product&gt; GetClothing(this IRepository repository)    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return repository.AsQueryable&lt;Product&gt;().Where(x =&gt; x.Class == &#8220;Clothing&#8221;);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br />&nbsp;&nbsp;&nbsp; }</p>
<p>This allows for the control of queries and the usage of them across multiple areas without rewriting the .Where and it&rsquo;s parameters everywhere. You can parameterize these further to increase reuse. Like so</p>
<p>&nbsp;</p>
<p>public static class ProductQueries   <br />&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static IQueryable&lt;Product&gt; GetClothing(this IRepository repository)    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return repository.GetByClass(&#8220;Clothing&#8221;);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static IQueryable&lt;Product&gt; GetByClass(this IRepository repository, string className)    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return repository.AsQueryable&lt;Product&gt;().Where(x =&gt; x.Class == className);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br />&nbsp;&nbsp;&nbsp; }</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework Cascading deletes avoid the gotchas]]></title>
    <link href="http://devlinliles.com/blog/Entity-Framework-Cascading-deletes-avoid-the-gotchas/"/>
    <updated>2011-04-21T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Entity-Framework-Cascading-deletes-avoid-the-gotchas</id>
    <content type="html"><![CDATA[<p>If you have ever had to do Cascading deletes with Entity Framework you have realized that it is happiness, but it has a couple of gotchas. The Context that entity framework uses will not fetch all items related from the database just to issue delete statements, it will however issue deletes from anything it knows about. So the solution is to have the delete from the database cascade or bring the items into the context manually.</p>
<p>Setting it in the EDMX is easy. Just pull up the properties on the association and set the on Delete behavior.</p>
<p><a href="http://devlinliles.com/images/image_36.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" src="http://devlinliles.com/images/image_thumb_36.png" border="0" alt="image" width="423" height="346" /></a></p>
<p>There are a few more step to help avoid the gotchas.</p>
<p>First if you can specify the Delete rule on the Foreign Keys in the database.</p>
<p><a href="http://devlinliles.com/images/image_37.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" src="http://devlinliles.com/images/image_thumb_37.png" border="0" alt="image" width="432" height="345" /></a></p>
<p>If you cannot do that you can specify an include for the collections that you want to delete.</p>
<p>var employee = entities.Employees.Include(&#8220;EmployeeAddresses&#8221;).FirstOrDefault();   <br />entities.DeleteObject(employee);</p>
<p>Or slightly cleaner to read but more trips to the database is to load the collections.</p>
<p>var employee = entities.Employees.FirstOrDefault();   <br />employee.EmployeeAddresses.Load();    <br />entities.DeleteObject(employee);</p>
<p>&nbsp;</p>
<p>Hope this helps</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework Connection Strings]]></title>
    <link href="http://devlinliles.com/blog/Entity-Framework-Connection-Strings/"/>
    <updated>2011-04-12T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Entity-Framework-Connection-Strings</id>
    <content type="html"><![CDATA[<p>We have all felt the pain of the entity framework connection string being embedded with meta data. I ran into this today in an integration test and had to create full qualified pointers to the dll to get past the dreaded &ldquo;Unable to load metadata resource&rdquo; error. Here are the fruits of that labor.</p>
<p>public class EntityFrameworkConnectionStringBuilder   <br />&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static string GetEFConnectionString(string serverName, string databaseName)    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var providerCs = new SqlConnectionStringBuilder    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataSource = serverName,    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitialCatalog = databaseName,    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IntegratedSecurity = true    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Type type = typeof(YourEntities);&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var csBuilder = new EntityConnectionStringBuilder    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Provider = &#8220;System.Data.SqlClient&#8221;,    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ProviderConnectionString = providerCs.ToString(),    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Metadata =    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string.Format(    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8220;res://{0}/{1}.YourEDMX.csdl|res://{0}/{1}.YourEDMX.ssdl|res://{0}/{1}.YourEDMX.msl&#8221;,    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type.Assembly.FullName, TrimAssemblyNameOffNamespace(type))    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return csBuilder.ToString();    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static string TrimAssemblyNameOffNamespace(Type type)    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //If you have a . in your dll name or your namespace is different     <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //you will have to adjust this. In this example the namespace was    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Project.Common and the Namespace was&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Project.Common.Repositories.ObjectContexts    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var result = type.Namespace.Substring(type.Namespace.IndexOf(&#8220;.&#8221;)+1);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result.Substring(result.IndexOf(&#8220;.&#8221;) + 1);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br />&nbsp;&nbsp; }</p>
<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Legacy Support with Entity Framework–Stored Procs]]></title>
    <link href="http://devlinliles.com/blog/Legacy-Support-with-Entity-Frameworke28093Stored-Procs/"/>
    <updated>2011-04-07T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Legacy-Support-with-Entity-Frameworke28093Stored-Procs</id>
    <content type="html"><![CDATA[<p>I have gotten several questions over the last few months over how to leverage Entity Framework with a large number of legacy stored procedures that cannot be re-written whole sale. The answer is slowly convert your data access to Entity framework using function imports, and as time permits move that logic into the query repository so that it can be unit tested and consistent.</p>
<p>Here is how to do it.</p>
<p>Make sure that you have added the stored procedures to the model.</p>
<p><a href="http://devlinliles.com/images/image_38.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" src="http://devlinliles.com/images/image_thumb_38.png" border="0" alt="image" width="515" height="517" /></a></p>
<p>Then right click the white background on the canvas&hellip;</p>
<p><a href="http://devlinliles.com/images/image_39.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" src="http://devlinliles.com/images/image_thumb_39.png" border="0" alt="image" width="600" height="399" /></a></p>
<p>This brings up the wizard&hellip;</p>
<p><a href="http://devlinliles.com/images/image_40.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" src="http://devlinliles.com/images/image_thumb_40.png" border="0" alt="image" width="499" height="684" /></a></p>
<p>1. Chose a Stored Procedure</p>
<p>2. Name the Method you will call in code for this.</p>
<p>3. Click the radio button for the complex type.</p>
<p>4. Click get column information.</p>
<p>5. Click Create New Complex Type &ndash; This saves a lot of manual creation.</p>
<p>6. Name your complex object.</p>
<p>7. Click Ok.</p>
<p>After these quick and easy steps you can then use this by calling the method on the entities.</p>
<p><a href="http://devlinliles.com/images/image_41.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" src="http://devlinliles.com/images/image_thumb_41.png" border="0" alt="image" width="600" height="44" /></a></p>
<p>Notice the Type safe parameters &ndash; This will help you avoid run time type mismatch issues throwing SQL Exceptions.</p>
<p>ObjectResult&lt;BillOfMaterials&gt; billOfMaterials = entities.GetBillOfMaterials()   <br />billOfMaterials.Select(x =&gt; x.StandardCost);</p>
<p>You can then call against this just like any other collection of objects.</p>
<p>&nbsp;</p>
<p>Enjoy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Entity Framework Repository without a DB]]></title>
    <link href="http://devlinliles.com/blog/Unit-Testing-Entity-Framework-Repository-without-a-DB/"/>
    <updated>2011-03-30T00:00:00-05:00</updated>
    <id>http://devlinliles.com/blog/Unit-Testing-Entity-Framework-Repository-without-a-DB</id>
    <content type="html"><![CDATA[<p>One of the problems that I have found is that I have trouble separating the data base calls from my unit tests while still covering my repository. We are going to talk about how to get around this, and pick up after this <a href="http://www.devlinliles.com/post/Object-Repository-Extension-to-the-Standard-Repository-Pattern.aspx" target="_blank">post</a> to avoid some of the prep work.</p>  <p>We First add a Test Project to the solution to house the tests.</p>  <p><a href="http://devlinliles.com/images/image_35.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://devlinliles.com/images/image_thumb_35.png" width="600" height="337" /></a></p>  <p>&#160;</p>  <p>We want to setup a Product Repository so that we can test it but we want to mock the IRepository that it takes to avoid the database call.</p>  <p>var mockRepository = MockRepository.GenerateMock&lt;IRepository&gt;();   <br />mockRepository.Stub(x =&gt; x.AsQueryable&lt;Product&gt;()).Return(new List&lt;Product&gt;    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new Product()    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <braysToManufacture = 4    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; },    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; new Product()    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; DaysToManufacture = 2    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }    <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }.AsQueryable());    <br />var target = new ProductRepository(mockRepository);</p>  <p>We setup the return with a value that should get filtered and a value that should not get filtered as to give us a control set. Make sure to call the AsQueryable on the object initialization so that it matches the return type on the repository.</p>  <p>After we have setup the test them we call our Long running products method.</p>  <p>&#160;</p>  <p>//act   <br />var result = target.GetLongRunningProducts();</p>  <p>//assert   <br />Assert.IsTrue(result.Count() == 1);    <br />Assert.AreEqual(4, result.FirstOrDefault().DaysToManufacture);</p>  <p>This test now gives us the ability to test our filters and our logical separation at the repository level without a database. We can leverage this to run integration performance and query tests against the database as well, but that is another post.</p>  <p>&#160;</p>  <p>Source code is <a href="http://www.devlinliles.com/Downloads/ObjectRepositoryUnitTesting.zip" target="_blank">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Repository Extension to the Standard Repository Pattern]]></title>
    <link href="http://devlinliles.com/blog/Object-Repository-Extension-to-the-Standard-Repository-Pattern/"/>
    <updated>2011-03-10T00:00:00-06:00</updated>
    <id>http://devlinliles.com/blog/Object-Repository-Extension-to-the-Standard-Repository-Pattern</id>
    <content type="html"><![CDATA[<p>I have found that there are often times that I use the same queries against an object set but I end up writing the same or very similar LINQ statements against my context. This however can be solved by use a object specific repository. Below is the implementation over Entity Framework 4.1 and the AdventureWorks sample.</p>
<p>&nbsp;</p>
<p>We start with a plain console application and add a EntityContext folder.</p>
<p><a href="http://devlinliles.com/images/image_34.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" src="http://devlinliles.com/images/image_thumb_34.png" border="0" alt="image" width="244" height="56" /></a></p>
<p>Then we add new item ADO.NET Entity Data Model &ndash; Name it AdventureWorks.edmx. Use the wizard to connect to the local database for AdventureWorks. Then we add another Folder for our Repository Implementations. This is going to follow the patterns discussed in the <a href="http://www.devlinliles.com/post/Repository-and-Interface-Re-use-between-Databases.aspx" target="_blank">Repository patterns</a> post and <a href="http://www.devlinliles.com/post/Separating-POCO-and-Context-in-EF-40.aspx" target="_blank">POCO separation</a> posts.</p>
<p>using System;   <br />using System.Data.Objects;    <br />using System.Linq;    <br />using ObjectRepository.EntityContext;</p>
<p>namespace ObjectRepository.Repository   <br />{    <br />&nbsp;&nbsp;&nbsp; public class EntityFrameworkRepository : IRepository    <br />&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private readonly ObjectContext _context;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public EntityFrameworkRepository(ObjectContext context)   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _context = context;    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IQueryable&lt;T&gt; AsQueryable&lt;T&gt;() where T : class   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _context.CreateObjectSet&lt;T&gt;();    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void SaveChanges()   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _context.SaveChanges();    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Delete&lt;T&gt;(T item) where T : class   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _context.DeleteObject(item);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Add&lt;T&gt;(T item) where T : class   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _context.CreateObjectSet&lt;T&gt;().AddObject(item);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Attach&lt;T&gt;(T item) where T : class   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _context.CreateObjectSet&lt;T&gt;().Attach(item);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Detach&lt;T&gt;(T item) where T : class   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _context.Detach(item);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br />&nbsp;&nbsp;&nbsp; }    <br />}</p>
<p>This gives us the base to use, and we could use it as is.</p>
<p>using System;   <br />using System.Collections.Generic;    <br />using System.Linq;    <br />using System.Text;    <br />using ObjectRepository.EntityContext;    <br />using ObjectRepository.Repository;</p>
<p>namespace ObjectRepository   <br />{    <br />&nbsp;&nbsp;&nbsp; class Program    <br />&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main(string[] args)    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRepository repository = new EntityFrameworkRepository(new AdventureWorksEntities());</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var longRunningProducts = repository.AsQueryable&lt;Product&gt;().Where(x =&gt; x.DaysToManufacture &gt; 3);   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br />&nbsp;&nbsp;&nbsp; }    <br />}</p>
<p>If we have to use the same long running products query a few times it is going to get old typing it and we have no control over the magic &ldquo;3&rdquo;. So how about we wrap a Product specific Repository.</p>
<p>using System.Linq;   <br />using ObjectRepository.EntityContext;</p>
<p>namespace ObjectRepository.Repository   <br />{    <br />&nbsp;&nbsp;&nbsp; public class ProductRepository : IProductRepository    <br />&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private readonly IRepository _repository;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ProductRepository(IRepository repository)   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository = repository;    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IQueryable&lt;Product&gt; GetLongRunningProducts()   <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _repository.AsQueryable&lt;Product&gt;().Where(x =&gt; x.DaysToManufacture &gt; 3);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br />&nbsp;&nbsp;&nbsp; }    <br />}</p>
<p>namespace ObjectRepository.Repository   <br />{    <br />&nbsp;&nbsp;&nbsp; public interface IProductRepository    <br />&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IQueryable&lt;Product&gt; GetLongRunningProducts();    <br />&nbsp;&nbsp;&nbsp; }    <br />}</p>
<p>Then our usage becomes this&hellip;</p>
<p>using System;   <br />using System.Collections.Generic;    <br />using System.Linq;    <br />using System.Text;    <br />using ObjectRepository.EntityContext;    <br />using ObjectRepository.Repository;</p>
<p>namespace ObjectRepository   <br />{    <br />&nbsp;&nbsp;&nbsp; class Program    <br />&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main(string[] args)    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRepository repository = new EntityFrameworkRepository(new AdventureWorksEntities());    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IProductRepository productRepository = new ProductRepository(repository);    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var longRunningProducts = productRepository.GetLongRunningProducts();    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }    <br />&nbsp;&nbsp;&nbsp; }    <br />}</p>
<p>&nbsp;</p>
<p>Now no matter where you use the long running products you have the same result, no one has to remember the magic &ldquo;3&rdquo; and if it changes it only changes once. This will also allow you to wrap the queries in unit test and integration tests for performance but that is another post.</p>
<p>&nbsp;</p>
<p>Source Code is <a href="http://www.devlinliles.com/downloads/ObjectRepository.zip" target="_blank">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Studio and Windows authentication from different domains]]></title>
    <link href="http://devlinliles.com/blog/Visual-Studio-and-Windows-authentication-from-different-domains/"/>
    <updated>2011-02-03T00:00:00-06:00</updated>
    <id>http://devlinliles.com/blog/Visual-Studio-and-Windows-authentication-from-different-domains</id>
    <content type="html"><![CDATA[<p>I am not sure how many people have tried to connect there personal computer or their work computer to a different domain and use TFS with it but it prompts for user credentials every time. This is a bit annoying especially when you have to punch in the domain every time. There is also the trouble of debugging with a windows authenticated website from the wrong domain. These are fairly common problems for consultants, contractors, and work from home guys who want to use their powerhouse rather than the dinky work laptop. Here is the solution.</p>
<p>&nbsp;</p>
<p>Create a new short cut and add this to the target</p>
<p><a href="http://devlinliles.com/images/image_33.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" src="http://devlinliles.com/images/image_thumb_33.png" border="0" alt="image" width="353" height="288" /></a></p>
<p>C:\Windows\System32\runas.exe /user:&lt;domain&gt;\&lt;user&gt; /netonly &#8220;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\devenv.exe&#8221;</p>
<p>That is for Visual Studio, You can also do this to hit windows authenticates sql servers from Sql Manager which doesn&rsquo;t allow you to punch in a different windows user.</p>
<p>C:\Windows\System32\runas.exe /user:&lt;domain&gt;\&lt;user&gt; /netonly &#8220;C:\program files (x86)\Microsoft SQL Server\100\Tools\Binn\VSShell\Common7\IDE\Ssms.exe&#8221;</p>
<p>&nbsp;</p>
<p>These two shortcuts have saved me tons of time in the last several weeks. Feel free to share!</p>
]]></content>
  </entry>
  
</feed>
